diff --git a/resource/archive/CMakeLists.txt b/resource/archive/CMakeLists.txt
index a02fbf1..0b65b5c 100644
--- a/resource/archive/CMakeLists.txt
+++ b/resource/archive/CMakeLists.txt
@@ -1,5 +1,6 @@
 d2_hack_add_library(d2_hack.resource.archive
-    res.cpp
+    res_archive.cpp
+    res_extensions.cpp
     res_file_info.cpp
     res_file_info.h
     res_material_parser.cpp
@@ -7,7 +8,8 @@ d2_hack_add_library(d2_hack.resource.archive
     ogre_material_generator.cpp
     ogre_material_generator.h
     
-    include/d2_hack/resource/archive/res.h
+    include/d2_hack/resource/archive/res_archive.h
+    include/d2_hack/resource/archive/res_extensions.h
 )
 target_link_libraries(d2_hack.resource.archive
     PRIVATE
diff --git a/resource/archive/include/d2_hack/resource/archive/res.h b/resource/archive/include/d2_hack/resource/archive/res.h
deleted file mode 100644
index e0ed672..0000000
--- a/resource/archive/include/d2_hack/resource/archive/res.h
+++ /dev/null
@@ -1,76 +0,0 @@
-#ifndef D2_HACK_RESOURCE_ARCHIVE_INCLUDE_D2_HACK_RESOURCE_ARCHIVE_RES_H
-#define D2_HACK_RESOURCE_ARCHIVE_INCLUDE_D2_HACK_RESOURCE_ARCHIVE_RES_H
-
-#include <d2_hack/common/platform.h>
-
-#include <memory>
-
-#include <OgreArchive.h>
-#include <OgreArchiveFactory.h>
-
-namespace d2_hack
-{
-namespace resource
-{
-namespace archive
-{
-namespace res
-{
-
-struct ResEntry;
-struct ResFileInfo;
-
-class ResArchive : public Ogre::Archive
-{
-public:
-    ResArchive(const Ogre::String& name, const Ogre::String& archType);
-    ~ResArchive();
-
-    virtual bool isCaseSensitive(void) const override;
-
-    virtual void load() override;
-
-    virtual void unload() override;
-
-    virtual Ogre::DataStreamPtr open(const Ogre::String& filename, bool readOnly = true) const override;
-
-    virtual Ogre::StringVectorPtr list(bool recursive = true, bool dirs = false) const override;
-
-    virtual Ogre::FileInfoListPtr listFileInfo(bool recursive = true, bool dirs = false) const override;
-
-    virtual Ogre::StringVectorPtr find(const Ogre::String& pattern, bool recursive = true, bool dirs = false) const override;
-
-    virtual bool exists(const Ogre::String& filename) const override;
-
-    virtual time_t getModifiedTime(const Ogre::String& filename) const override;
-
-    virtual Ogre::FileInfoListPtr findFileInfo(const Ogre::String& pattern, bool recursive = true, bool dirs = false) const override;
-
-    class Factory : public Ogre::ArchiveFactory
-    {
-    public:
-        virtual const Ogre::String& getType() const override;
-
-        virtual Ogre::Archive* createInstance(const Ogre::String& name, bool bReadOnly) override;
-
-        virtual void destroyInstance(Ogre::Archive* archive) override;
-    };
-
-private:
-    std::unique_ptr<ResFileInfo> m_archiveInfo;
-    Ogre::FileInfoList m_fileInfoList;
-    const std::string m_resId;
-
-    bool FindEntry(const Ogre::String & filename, ResEntry& entry) const;
-
-    Ogre::DataStreamPtr OpenMaterial(const Ogre::String& filename, const Ogre::DataStreamPtr& stream) const;
-};
-
-
-
-} // namespace res
-} // namespace archive
-} // namespace resource
-} // namespace d2_hack  
-
-#endif // D2_HACK_RESOURCE_ARCHIVE_INCLUDE_D2_HACK_RESOURCE_ARCHIVE_RES_H
diff --git a/resource/archive/ogre_material_generator.cpp b/resource/archive/ogre_material_generator.cpp
index 2a06238..39b044a 100644
--- a/resource/archive/ogre_material_generator.cpp
+++ b/resource/archive/ogre_material_generator.cpp
@@ -1,4 +1,4 @@
-#include "ogre_material_generator.h"
+#include <d2_hack/resource/archive/ogre_material_generator.h>
 
 #include <OgreException.h>
 
@@ -7,6 +7,7 @@
 #include <d2_hack/common/types.h>
 #include <d2_hack/common/memory_mgmt.h>
 
+#include <d2_hack/resource/archive/res_extensions.h>
 #include <d2_hack/resource/manager/manager.h>
 
 #include "res_material_parser.h"
@@ -84,7 +85,7 @@ static Ogre::DataStreamPtr PrepareColorMaterial(const MaterialDescriptor& md, co
     return res;
 }
 
-std::string LookupTextureByIndex(const ResFileInfo& fileInfo, std::uint32_t textureIndex)
+static std::string LookupTextureByIndex(const ResFileInfo& fileInfo, std::uint32_t textureIndex)
 {
     for (const auto& resEntry : fileInfo.info)
     {
@@ -146,6 +147,8 @@ Ogre::DataStreamPtr GenerateMaterial(const ResFileInfo& fileInfo, const std::str
     }
 }
 
+
+
 } // namespace res
 } // namespace archive
 } // namespace resource
diff --git a/resource/archive/ogre_material_generator.h b/resource/archive/ogre_material_generator.h
index aaf6b32..13e5275 100644
--- a/resource/archive/ogre_material_generator.h
+++ b/resource/archive/ogre_material_generator.h
@@ -1,14 +1,8 @@
 #ifndef D2_HACK_RESOURCE_ARCHIVE_OGRE_MATERIAL_GENERATOR_H
 #define D2_HACK_RESOURCE_ARCHIVE_OGRE_MATERIAL_GENERATOR_H
 
+#include <d2_hack/resource/archive/res_archive.h>
 
-//#include <optional>
-//#include <string_view>
-
-#include <OgreDataStream.h>
-//#include <OgreVector.h>
-
-#include "res_file_info.h"
 
 namespace d2_hack
 {
@@ -19,8 +13,9 @@ namespace archive
 namespace res
 {
 
+Ogre::DataStreamPtr GenerateMaterial(const ResFileInfo& fileInfo, const std::string& filename, const Ogre::DataStreamPtr& stream)
+
 
-Ogre::DataStreamPtr GenerateMaterial(const ResFileInfo& fileInfo, const std::string& filename, const Ogre::DataStreamPtr& stream);
 
 } // namespace res
 } // namespace archive
diff --git a/resource/archive/res.cpp b/resource/archive/res.cpp
deleted file mode 100644
index f6ec5c3..0000000
--- a/resource/archive/res.cpp
+++ /dev/null
@@ -1,262 +0,0 @@
-#include <d2_hack/resource/archive/res.h>
-
-#include <fstream>
-
-#include <OgreException.h>
-
-#include <d2_hack/common/offset_data_stream.h>
-
-#include "res_file_info.h"
-#include "ogre_material_generator.h"
-
-namespace d2_hack
-{
-namespace resource
-{
-namespace archive
-{
-namespace res
-{
-
-static std::string GetResId(const std::string& fileName)
-{
-    std::string baseName;
-    std::string extension;
-    std::string path;
-    Ogre::StringUtil::splitFullFilename(fileName, baseName, extension, path);
-
-    return baseName;
-}
-
-ResArchive::ResArchive(const Ogre::String& name, const Ogre::String& archType)
-    : Ogre::Archive(name, archType)
-    , m_archiveInfo(std::make_unique<ResFileInfo>())
-    , m_resId(GetResId(name))
-{
-}
-
-ResArchive::~ResArchive() = default;
-
-bool ResArchive::isCaseSensitive(void) const
-{
-    return true;
-}
-
-void ResArchive::load()
-{
-    std::ifstream archiveFile(mName.c_str(), std::ios_base::binary);
-    if (!archiveFile)
-    {
-        OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS, "Failed to open file [" + mName + "]");
-    }
-
-    Ogre::FileStreamDataStream dataStream(&archiveFile, false);
-
-    ReadFileInfo(m_resId, dataStream, *m_archiveInfo);
-
-    for (const auto& resEntry : m_archiveInfo->info)
-    {
-        Ogre::FileInfo info;
-
-        info.archive = this;
-        info.filename = resEntry.name;
-        Ogre::StringUtil::splitFilename(resEntry.name, info.basename, info.path);
-        info.compressedSize = resEntry.size;
-        info.uncompressedSize = resEntry.size;
-
-        m_fileInfoList.push_back(info);
-    }
-}
-
-void ResArchive::unload()
-{
-    m_archiveInfo->info.clear();
-    m_fileInfoList.clear();
-}
-
-
-Ogre::DataStreamPtr ResArchive::open(const Ogre::String& filename, bool /* readOnly */) const
-{
-    ResEntry entry;
-
-    std::ifstream* stdStream = OGRE_NEW_T(std::ifstream, Ogre::MEMCATEGORY_GENERAL)(mName.c_str(), std::ios_base::binary);
-    if (*stdStream)
-    {
-        Ogre::DataStreamPtr fileStream(new Ogre::FileStreamDataStream(stdStream));
-
-        if (FindEntry(filename, entry))
-        {
-            Ogre::DataStreamPtr streamForFile(new common::OffsetDataStream(fileStream, entry.offset, entry.size));
-            if (entry.type == EntryType::File)
-            {
-                return streamForFile;
-            }
-            else if (entry.type == EntryType::Material)
-            {
-                return OpenMaterial(filename, streamForFile);
-            }
-            else if (entry.type == EntryType::Color)
-            {
-                return streamForFile;
-            }
-
-            OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS,
-                        "file [" + filename + "] cannot be opened for type: " + std::to_string(static_cast<int>(entry.type)));
-        }
-        OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS, "file [" + filename + "] cannot be found in archive [" + mName + "]");
-    }
-    OGRE_EXCEPT(Ogre::Exception::ERR_INVALIDPARAMS, "Failed to open stream [" + mName + "]");
-}
-
-Ogre::StringVectorPtr ResArchive::list(bool recursive, bool dirs) const
-{
-    Ogre::StringVectorPtr ret = Ogre::StringVectorPtr{new Ogre::StringVector{}};
-
-    Ogre::FileInfoList::const_iterator i, iend;
-    iend = m_fileInfoList.end();
-    for (i = m_fileInfoList.begin(); i != iend; ++i)
-    {
-        if ((dirs == (i->compressedSize == size_t(-1))) && (recursive || i->path.empty()))
-        {
-            ret->push_back(i->filename);
-        }
-    }
-
-    return ret;
-}
-
-Ogre::FileInfoListPtr ResArchive::listFileInfo(bool recursive, bool dirs) const
-{
-    Ogre::FileInfoList* fil = OGRE_NEW_T(Ogre::FileInfoList, Ogre::MEMCATEGORY_GENERAL)();
-    Ogre::FileInfoList::const_iterator i, iend;
-    iend = m_fileInfoList.end();
-    for (i = m_fileInfoList.begin(); i != iend; ++i)
-    {
-        if ((dirs == (i->compressedSize == size_t(-1))) &&
-            (recursive || i->path.empty()))
-        {
-            fil->push_back(*i);
-        }
-    }
-
-    return Ogre::FileInfoListPtr{fil};
-}
-
-Ogre::StringVectorPtr ResArchive::find(const Ogre::String& pattern, bool recursive, bool dirs) const
-{
-    Ogre::StringVectorPtr ret = Ogre::StringVectorPtr{new Ogre::StringVector{}};
-    // If pattern contains a directory name, do a full match
-    bool full_match = (pattern.find('/') != Ogre::String::npos) || (pattern.find('\\') != Ogre::String::npos);
-    bool wildCard = pattern.find('*') != Ogre::String::npos;
-
-    Ogre::FileInfoList::const_iterator i, iend;
-    iend = m_fileInfoList.end();
-    for (i = m_fileInfoList.begin(); i != iend; ++i)
-    {
-        if ((dirs == (i->compressedSize == size_t(-1))) &&
-            (recursive || full_match || wildCard))
-            // Check basename matches pattern (zip is case insensitive)
-        {
-            if (Ogre::StringUtil::match(full_match ? i->filename : i->basename, pattern, false))
-            {
-                ret->push_back(i->filename);
-            }
-        }
-    }
-
-    return ret;
-}
-
-bool ResArchive::exists(const Ogre::String& filename) const
-{
-    ResEntry entry;
-
-    return FindEntry(filename, entry);
-}
-
-time_t ResArchive::getModifiedTime(const Ogre::String& /* filename */) const
-{
-    struct stat tagStat;
-    bool ret = (stat(mName.c_str(), &tagStat) == 0);
-
-    if (ret)
-    {
-        return tagStat.st_mtime;
-    }
-    else
-    {
-        return 0;
-    }
-}
-
-Ogre::FileInfoListPtr ResArchive::findFileInfo(const Ogre::String& pattern, bool recursive, bool dirs) const
-{
-    Ogre::FileInfoListPtr ret = Ogre::FileInfoListPtr{new Ogre::FileInfoList{}};
-    // If pattern contains a directory name, do a full match
-    bool full_match = (pattern.find('/') != Ogre::String::npos) || (pattern.find('\\') != Ogre::String::npos);
-    bool wildCard = pattern.find('*') != Ogre::String::npos;
-
-    Ogre::FileInfoList::const_iterator i, iend;
-    iend = m_fileInfoList.end();
-    for (i = m_fileInfoList.begin(); i != iend; ++i)
-    {
-        if ((dirs == (i->compressedSize == size_t(-1))) && (recursive || full_match || wildCard))
-        {
-            // Check name matches pattern (zip is case insensitive)
-            if (Ogre::StringUtil::match(full_match ? i->filename : i->basename, pattern, false))
-            {
-                ret->push_back(*i);
-            }
-        }
-    }
-
-    return ret;
-}
-
-
-
-bool ResArchive::FindEntry(const Ogre::String& filename, ResEntry& entry) const
-{
-    for (const auto& e : m_archiveInfo->info)
-    {
-        if (e.name == filename)
-        {
-            entry = e;
-            return true;
-        }
-    }
-
-    return false;
-}
-
-Ogre::DataStreamPtr ResArchive::OpenMaterial(const Ogre::String& filename, const Ogre::DataStreamPtr& stream) const
-{
-    return GenerateMaterial(*m_archiveInfo, filename, stream);
-}
-
-/////////////////////////////////////////////////////////////////////////////////////////
-
-namespace
-{
-Ogre::String ResourceType = "D2Res";
-}
-
-const Ogre::String& ResArchive::Factory::getType() const
-{
-    return ResourceType;
-}
-
-Ogre::Archive* ResArchive::Factory::createInstance(const Ogre::String& name, bool /* bReadOnly */)
-{
-    return new ResArchive(name, ResourceType);
-}
-
-void ResArchive::Factory::destroyInstance(Ogre::Archive* archive)
-{
-    delete archive;
-}
-
-} // namespace res
-} //namespace archive
-} // namespace resource
-} // namespace d2_hack  
diff --git a/resource/archive/res_file_info.cpp b/resource/archive/res_file_info.cpp
index d8c44cd..ba29873 100644
--- a/resource/archive/res_file_info.cpp
+++ b/resource/archive/res_file_info.cpp
@@ -2,6 +2,8 @@
 
 #include <functional>
 
+#include <d2_hack/resource/archive/res_extensions.h>
+
 #include <d2_hack/common/types.h>
 #include <d2_hack/common/reader.h>
 #include <d2_hack/common/numeric_conversion.h>
@@ -29,6 +31,19 @@ const char SoundFiles[] = "SOUNDFILES";
 
 } // namespace entries
 
+
+static const std::map<std::string, std::string> entriesToExtMapping =
+{
+    {entries::Colors, extensions::ColorExt},
+    {entries::Materials, extensions::MaterialExt},
+    {entries::Sounds, extensions::SoundExt},
+    {entries::TextureFiles, extensions::TextureFileExt},
+    {entries::PaletteFiles, extensions::ColorExt},
+    {entries::BackFiles, extensions::PaletteFileExt},
+    {entries::MaskFiles, extensions::BackFileExt},
+    {entries::SoundFiles, extensions::SoundFileExt},
+};
+
 namespace
 {
 struct Header
@@ -138,7 +153,7 @@ public:
         entry.offset = GetStream().tell();
         entry.size = SkipLine('\0');
 
-        entry.name = sectionName + "_" + std::to_string(index) + ".d2resinfo";
+        entry.name = std::to_string(index) + entriesToExtMapping.at(sectionName);
     }
 
     void ParseColorsData(const std::string& /* sectionName */, ResEntry& entry, size_t index)
@@ -163,7 +178,7 @@ public:
             entry.name = entry.name.substr(0, sep);
         }
 
-        entry.name = common::GetResourceName(m_resId, entry.name) + ".material";
+        entry.name = common::GetResourceName(m_resId, entry.name) + extensions::MaterialExt;
     }
 
     ParserDispatcher m_dispatcher;
@@ -184,7 +199,7 @@ void ReadFileInfo(const std::string& resId, Ogre::DataStream& stream, ResFileInf
 
 std::string GetColorFileName(const std::string& resId, const std::string& colorId)
 {
-    return common::GetResourceName(resId, entries::Colors + colorId) + ".d2colorinfo";
+    return common::GetResourceName(resId, entries::Colors + colorId) + extensions::ColorExt;
 }
 
 } // namespace res
diff --git a/resource/archive/res_material_parser.cpp b/resource/archive/res_material_parser.cpp
index 3755066..aeb701a 100644
--- a/resource/archive/res_material_parser.cpp
+++ b/resource/archive/res_material_parser.cpp
@@ -51,9 +51,9 @@ MaterialDescriptor ParseMaterialDescriptor(const std::string_view& content)
 
     using qi::int_;
     using qi::float_;
-    using qi::eps;
     using qi::lit;
     using qi::_val;
+    using qi::char_;
 
     qi::rule<iterator_type, Ogre::Vector2(), ascii::space_type> ogreVector2Grammar;
     ogreVector2Grammar %= float_[qi::_val[0] = qi::_1] >> float_[qi::_val[1] = qi::_1];
@@ -61,8 +61,6 @@ MaterialDescriptor ParseMaterialDescriptor(const std::string_view& content)
     qi::rule<iterator_type, ascii::space_type> data;
     data %=
         (
-            //eps
-            //|| 
             lit("noz")[setNoz]
             || lit("transp") >> float_[setTransp]
             || lit("notile")[setNotile]
@@ -92,7 +90,7 @@ MaterialDescriptor ParseMaterialDescriptor(const std::string_view& content)
     qi::rule<iterator_type, ascii::space_type> start;
 
     start %=
-        materialTypeSymbols[setType] >> int_[setIndex] >> *data;
+        +qi::char_("a-zA-Z_0-9") >> materialTypeSymbols[setType] >> int_[setIndex] >> *data;
 
     
     bool isOk = phrase_parse(first, last, start, ascii::space);
diff --git a/resource/archive/tool/CMakeLists.txt b/resource/archive/tool/CMakeLists.txt
index 36c282d..1d55e69 100644
--- a/resource/archive/tool/CMakeLists.txt
+++ b/resource/archive/tool/CMakeLists.txt
@@ -1 +1,2 @@
 add_subdirectory(palette_reader)
+add_subdirectory(res_archive_extractor)
